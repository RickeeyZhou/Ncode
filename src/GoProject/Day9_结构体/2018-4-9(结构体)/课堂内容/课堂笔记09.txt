上节课回顾：
函数：
函数的类型：
	func (int,int) int
数据类型：
func fun1()int


a := fun1//将函数赋值给a，a也是一个函数类型
a() //func ()int

b := fun1()//将函数调用，执行结果赋值给b

匿名函数：一个没有函数名的函数。
func ()(){

}()

fun2:=func(){

}

fun2()

作为参数：

func test1(......,fun func ()()){

	fun()
}


作为返回值：

func test2(....)func ()int{
	//...
	return 匿名函数
}

// 将一个函数内部的匿名函数return出去了



指针：
指针变量：存储另一个变量的地址
整数：
a := 100 // 变量名，变量值,变量类型,地址:0x1314

fmt.Println(a) // 100
fmt.Printf("%T\n", a)
fmt.Printf("%p\n",&a)


&：取地址符
*：获取数据

指针：定义一个指针类型的变量，可以存储a的内存地址
*T-->该指针的类型，存储了T类型变量的地址

p1-->*int
p1 = &a //0x1314
fmt.Printf("%p\n",0x1314)
fmt.Printf("%p\n",&p1)

fmt.Println(a, *p1) // 100, 100


**int-->
p2 = &p1


数据类型：指针类型：指针的指针类型
int :*int :**int

深拷贝和浅拷贝：
深拷贝：拷贝的数据
浅拷贝：拷贝的地址

a := b // 将b赋值给a
值类型：
	默认就是深拷贝
	但是可以通过指针地址实现浅拷贝
引用类型：
	默认就是浅拷贝
	对于slice，map这些容器，如果想深拷贝，遍历容器获取数据，存入到

创建a，依次遍历b中的每个元素，存入到a中
	slice：append()
	map[key]=value

指针作为参数：
	数组


func test(arr [4]int){

}

func test(arr *[4]int){

}
	

本堂课内容：

面向对象：OOP(Object Oriented Programming)
	关注：对象
		对象：属性和功能行为


类和对象
类：同一类事物的统称：
	人类：
		姓名，年龄，住址，性别。。。
		行为：敲代码(),吃()。。。
	车：
		静态属性："名字"
		动态属性：动作行为--->函数，方法

	

对象：类中的一个具体的实例
	rose，张三。。。
	
	楼下的红色跑车，


万事万物皆对象


面向对象：不是一门语言，是一种编程思想。


我想开车去新疆：
	我：人
	车：车
	新疆：地点


	思考方式：
	step1：考虑问题域中有哪些对象(类)
	step2：何为这些对象(描述类)
		属性-->字段
		行为-->方法
	step3：对象和对象的关系(类和类)

人：

	字段：name，age，sex
	行为：eat(),sleep()

学生：(继承人)
	字段：school
	行为：study()...
	

封装：""打包
	类：

继承：学生继承人类
	子类，父类	


多态：一类事物的多种形态
	人：
		人
		学生

学生--->学生--->人



函数：function
方法：method

Java，Python，Go



面向过程：
	关注：过程：步骤
		万年历：2018年3月的日期
		step1，1900年1月1日星期一
			2018年2月底--1900年1月1日的总天数
			getSum()
		step2，总天数除以7取余数：该打印的空格数量
		step3，
		step4.打印空格，打印日历



通过面向对象的思维方式设计程序：
1.构建结构体
2.设计结构体的功能方法
3.创建结构体对象







fmt.Println("helloworld")


类和类的关系：
	聚合关系：将一个类作为另一个类的属性字段


人：结构体
	姓名，年龄，书

书：结构体
	书名，书价格，书作者




封装性：
继承性：
	描述两个类的关系。
	一个类作为另一个类的子类。
	
	继承的意义：
	1.避免重复的代码。(子类)
	2.扩展类的功能。(父类)

人类：
	姓名，年龄，性别
	eat(),sleep()

学生类：
	姓名，年龄，性别，学校
	eat(),sleep(),study()


学生类，继承人类

动物：name，age

	

猫类：继承动物
	name，age
	

狗类：继承动物
	name，age，color

is - a

子类 is a 父类


总结和作业：
一、
面向对象：不是一门语言，也不是一门技术，而是一种编程思路。

面向对象：
	A：考虑问题域中涉及到的对象
	B：定义这些对象--->类
	C：思考类和类的关系
		



类，对象：面向对象中的量大核心概念
类：同一类事物的抽象描述。
	静态属性：字段
	动态属性：方法

对象：类中一个具体的实例。
	对象是存在，


类和对象的关系？
	类是对象的抽象描述，对象是类的一个具体的实例。

	将一类对象共同特征，进行抽取---->定义类
	将类进行实例化--->创建对象


type Person struct{
	name, age, sex
}

p1 := Person{"王二狗",30,"男"} // 将类进行实例化得到对象。
p2 := Preson{"李小花",18,"女"}



面向对象的三大特征：
1.封装性：
	"打包"
	函数，方法，结构体。。。

2.继承性：
	描述一个类和另一个类的关系。
	子类继承父类：
		子类可以直接访问父类的属性和方法。
		子类可以新增自己的属性和方法
		子类可以重写父类已有的方法。

	靠结构体的嵌套：
		匿名字段：提升字段


3.多态性：接口


二、
1、结构体的定义：

type 结构体名 struct{
	// 属性，字段，field
	字段名 字段类型
	。。。
}

2、创建对象：
对象名 := 结构体名{val1,val2,val3...} //保证顺序
对象名 := 结构体名{字段名:val1,字段名:val2,...}
对象名 := 结构体名{}
对象名.字段名 ，进行赋值和取值

对象名 := new(Type) //指针

结构体的类型：

3、结构体的类型：值类型
	默认是深拷贝
	结构体指针

4、结构体作为参数和返回值
	func fun1(p Person){}

	func fun2(p *Person){}


5、匿名结构体和匿名字段
	没有名字的结构体：
	a := struct {字段的定义}{赋值}
	func (){} ()

	type A struct{
		string
		int
	}

	b := A{"字符串", 20}
	b.string,b.int
	//匿名字段可以理解为字段名和字段类型一致

6、结构体的嵌套
type A struct{
	name string
	age int
}

type B struct{
	a A // 模拟聚合关系
	.....
}



type C struct{
	A // 模拟继承
}


b := B{}

b.a.name,


c := C{}
b.name,

	















函数
func test1(参数列表) (返回值列表){
	//....
}

test1()

方法-->哪个结构体的功能，由该结构体的对象才能调用
func (p Person)test2(参数列表)(返回值列表){

}

func (s Student) test3(){...}

p1,p2

p1.test2()
p2.test2()
test2()

s1.test3()
s2.test3()




















总结和作业：