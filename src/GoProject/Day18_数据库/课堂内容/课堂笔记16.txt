上节课回顾：
Socket编程：
	socket，套接字，插座

主机之间传递数据
1.定位主机：
	ip地址

2.定位网络应用程序：
	port端口
	0-65535


3.协议：TCP，UDP
	TCP：面向连接，数据安全，效率低
	UDP：面向无连接，数据不安全，效率高




TCP/IP,协议族
网络4层模型，7层理论模型



go支持socket编程：net包
编程的操作步骤：
TCP协议：
	服务端，客户端

服务端：
step1：提供服务器的地址：ip+port
	net.ResolveTCPAddr("tcp4",string)-->tcpAddr

step2：获取监听器对象，用于监听该接口
	net.ListenTCP("tcp",tcpAddr)-->listener

step3：等待客户端的链接,阻塞
	listener.Accept()-->Conn

step4：数据交互：
	Read([] byte)-->n,err
	Write([] byte)-->n,err

step5：关闭
	conn.Close()


客户端：
step1：提供服务器的地址：ip+port
	net.ResolveTCPAddr("tcp4",string)-->tcpAddr

step2：申请连接服务器
	net.DialTCP("tcp",nil,tcpAddr)-->tcpConn

step3：数据交互：
	Read([] byte),堵塞
	Write([] byte),

step4：关闭
	tcpConn.Close()



服务器同时处理多个客户端的连接

socket+并发

//main goroutine
for{
	//1.接收连接请求
	Accept()-->conn
	//2.go goroutine
	go func(){
		//数据交互
	}
		
}
//作业：
客户端--->服务端
	传图片


// 服务器-->客户端


服务器端：map
		key,客户端的ip+port
		value，conn

main goroutine，死循环
for{//死循环
	conn,_:=Accept()
	map[ip+port]=conn
	go sendData(conn, map)

}
<-done
//
go sendData(){
	for{
		//1.从con中读取数据
		conn.Read()-->over
		//2.遍历map发送给每个vaule的conn
		for _,v:= range map{
			v.write()
		}
	}
	done<-true
}





TCP：
服务器端：别动

客户端：主动


UDP：
	发送方和接收方

逻辑：发送方将数据发送给接收方
	发送方发送数据，指定接收方的ip+port
		相当于客户端

	接收方：指定自己的ip+port
		相当于服务器


发送方：
	发送


接收方：
	发送方











